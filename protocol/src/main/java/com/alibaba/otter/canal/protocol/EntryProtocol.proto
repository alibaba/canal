package com.alibaba.otter.canal.protocol;

option java_package = "com.alibaba.otter.canal.protocol";
option java_outer_classname = "CanalEntry";
option optimize_for = SPEED;

/****************************************************************
 * message model
 *如果要在Enum中新增类型，确保以前的类型的下标值不变.
 ****************************************************************/
message Entry {
	/**协议头部信息**/
	optional Header						header 				= 1;
	
	/**打散后的事件类型**/
	optional EntryType					entryType			= 2 [default = ROWDATA];
	
	/**传输的二进制数组**/
	optional bytes						storeValue			= 3;
}

/**message Header**/
message Header {
	/**协议的版本号**/
	optional int32 					version				= 1 [default = 1];	
	
	/**binlog/redolog 文件名**/
	optional string					logfileName			= 2;
	
	/**binlog/redolog 文件的偏移位置**/
	optional int64 					logfileOffset		= 3;
	
	/**服务端serverId**/
	optional 	int64				serverId         	= 4;	
	
	/** 变更数据的编码 **/
	optional string					serverenCode		= 5;
	
	/**变更数据的执行时间 **/
	optional int64					executeTime			= 6;
	
	/** 变更数据的来源**/
	optional Type					sourceType			= 7 [default = MYSQL];
	
	/** 变更数据的schemaname**/
	optional string					schemaName			= 8;
	
	/**变更数据的tablename**/
	optional string					tableName			= 9;	
	
	/**每个event的长度**/
	optional int64					eventLength         = 10;
	
	/**数据变更类型**/
	optional EventType 				eventType			= 11 [default = UPDATE];
	
	/**预留扩展**/
	repeated Pair					props				= 12;		
}

/**每个字段的数据结构**/
message Column {
	/**字段下标**/
	optional int32		index			= 		1;
	
	/**字段类型**/
	optional int32 		sqlType			= 		2;
	
	/**字段名称(忽略大小写)，在mysql中是没有的**/
	optional string		name			=		3;
	
	/**是否是主键**/
	optional bool 		isKey			= 		4;
	
	/**如果EventType=UPDATE,用于标识这个字段值是否有修改**/
	optional bool		updated			= 		5;
	
	/** 标识是否为空  **/
	optional bool		isNull			= 		6 [default = false];
	
	/**预留扩展**/
	repeated Pair		props			=		7;	
	
	/** 字段值,timestamp,Datetime是一个时间格式的文本 **/
	optional string		value			= 		8;
	
	/** 对应数据对象原始长度 **/
	optional int32		length			= 		9;
}

message RowData {

	/** 字段信息，增量数据(修改前,删除前) **/
	repeated Column			beforeColumns  	= 		1;

	/** 字段信息，增量数据(修改后,新增后)  **/
	repeated Column			afterColumns	= 		2;
	
	/**预留扩展**/
	repeated Pair			props			=		3;	
}

/**message row 每行变更数据的数据结构**/
message RowChange {

	/**tableId,由数据库产生**/
	optional int64	 		tableId			=		1;
	
	/**数据变更类型**/
	optional EventType 		eventType		= 		2 [default = UPDATE];
	
	/** 标识是否是ddl语句  **/
	optional bool			isDdl			= 		10 [default = false];

	/** ddl/query的sql语句  **/
	optional string			sql 			= 		11;
	
	/** 一次数据库变更可能存在多行  **/
	repeated RowData		rowDatas		= 		12;
	
	/**预留扩展**/
	repeated Pair			props			=		13;	
	
}

/**开始事务的一些信息**/
message TransactionBegin{
	
	/**执行时间**/
	optional int64			executeTime		=		1;
	
	/**事务号**/
	optional string			transactionId	=		2;
	
	/**预留扩展**/
	repeated Pair			props			=		3;	
}

/**结束事务的一些信息**/
message TransactionEnd{
	
	/**执行时间**/
	optional int64			executeTime		=		1;
	
	/**事务号**/
	optional string			transactionId	=		2;
	
	/**预留扩展**/
	repeated Pair			props			=		3;	
}

/**预留扩展**/
message Pair{
	optional string 		key				= 			1;	
	optional string 		value			= 			2;	
}

/**打散后的事件类型，主要用于标识事务的开始，变更数据，结束**/
enum EntryType{
	TRANSACTIONBEGIN 		=		1;
	ROWDATA					=		2;
	TRANSACTIONEND			=		3;
}

/** 事件类型 **/
enum EventType {
    INSERT 		= 		1;
    UPDATE 		= 		2;
    DELETE 		= 		3;
    CREATE		= 		4;
    ALTER		= 		5;
    ERASE		= 		6;
    QUERY		=		7;
}

/**数据库类型**/
enum Type {
    ORACLE		= 		1;
    MYSQL		= 		2;
    PGSQL		= 		3;
}